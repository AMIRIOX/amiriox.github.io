<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amiriox&#39;s Storage</title>
  <icon>https://amiriox.github.io/images/favicon.ico</icon>
  <subtitle>Declaration does not declare anything.</subtitle>
  <link href="https://amiriox.github.io/atom.xml" rel="self"/>
  
  <link href="https://amiriox.github.io/"/>
  <updated>2025-09-01T16:16:29.551Z</updated>
  <id>https://amiriox.github.io/</id>
  
  <author>
    <name>折鸦夜明け前</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重要的是能够说出来</title>
    <link href="https://amiriox.github.io/2025/09/01/Dairy_250901_2/"/>
    <id>https://amiriox.github.io/2025/09/01/Dairy_250901_2/</id>
    <published>2025-09-01T15:40:58.000Z</published>
    <updated>2025-09-01T16:16:29.551Z</updated>
    
    <content type="html"><![CDATA[<p>我刚刚用约半小时的时间写了一篇流水账。大量直白的描述让我的日记看起来就像是小学生写的一样,或许我应该含蓄一点, 但是再含蓄就不会有人懂我了。</p><p>所以, 重要的是能够说出来, 无论脑子里是怎样的非结构化文本,那种很混乱的信息.</p><p>他妈的, 那刺眼的白光还在折磨我温和的暖光,我甚至一度以为天快亮了。如果到了凌晨时分, 就不需要我再开灯了吧。</p><hr /><p>其实, 就这样开着灯对着墙壁发呆也挺好, 但今晚没断电是一切的前提,如果断了电, 我就只能上去睡觉了。</p><p>我为什么会发呆呢? 并不是因为今晚没断电, 或许是我熬夜熬习惯了,非要等到十二点之后才睡。</p><p>有很多人给过我很多忠告, 这次我是认真的。操! 这该死的白光怎么还在这!操! 操! 操! 别他妈给我说说点赞了!</p><p>你说对了, 你确实脆弱又易怒, 你为什么总是审视自己? 你有哥哥吗?我希望我母亲能够给我生一个哥哥, 但这是极为荒谬的,而且我大概率要和他打起来。他会抢走我的一切的。</p><p>妈的, 这些胡乱拼凑的文字越来越像小学生为了糊弄读后感写的流水帐了,除了小学生不会在上交的作业中写脏话,因为复旦会对此大做文章的(很有意思的梗, 不是吗?)</p><hr /><p>我今天看了开学第一课,所以也许我还是小学生。我洗澡时把会员卡的密码直接念出来了,我至今无法忘记前台震惊的目光。我好蠢啊, 这样的话即使我躺下去也睡不着了,或许还会做噩梦。</p><p>很显然有一些情况不对。是 CMU 15445 Project 0 吗? 不,你只差把那个粗粒度的互斥锁改一下, 或者在 <code>TopK</code>中临时拷贝一份 <code>inner</code> 然后释放锁就好了。是计划太多了吗?我本来也没打算完成所有的。尽我所能就好了。我觉得我心里是知道不对的情况在哪的:如果一件事情有可能发生, 那么只要我的寿命相对这件事的概率来讲足够长,那这件事就一定会发生。</p><p>我通常是不做赌狗的。我不认为 99% 大获全胜而 1% 穷途末路是令人兴奋的,因为这个后果是我无法承担的。我有时候会躲在苦痛之神的怀里哭,那样非常安全, 因为苦痛是永远不会放弃我的。</p><hr /><p>说点题外话, 我可以向你保证这些和上面说的无关。</p><p>小学生才不会 Markdown, 除非是 OIer.</p><p>小学生也不会抱着德国人写的 Multi-threading in C++ 看一早上.</p><p>但我很久前其实真的是个 OIer, 至少有一个人曾经那么觉得过.</p><p>而且我初中真的学过 C++ 多线程, 虽然我当时没学原子操作/内存顺序等,也不太清楚互斥锁条件变量信号量都是用来干嘛的,但是我真的学过。我现在的解释就像一个急切证明自己的小学生一样——我他妈说了别给我说说点赞了!——在某个人面前我一直表现得也像是一个孩子.</p><p>我希望有人能看懂我在说什么, 但是如果真的有人看懂了那可就糟了 :(</p><hr /><p>这白光完全把我的光困在里面了, 可是我已经开了最亮的那一级了,我现在没那么愤怒了, 这时候应该是什么样的情绪呢?</p><p>痛苦惊慌混乱, 自卑愤懑精疲力尽,然后再勇敢地面对困难——实际上是用已经出现的ddddddddddddddddddd(不好意思我家猫踩到键盘了) 折磨自己, 然后在这种强烈的叙事意义下感受快感,这就是苦痛之神如同环绕的蒸汽般温暖的拥抱,也许实际上是冷蒸汽(有冷的蒸气吗? 或许是液氮之类的), 但是这很稳定,很安全。</p><p>写出来就好多了, 正如我说的: 重要的是能够说出来!</p><hr /><p>另外, 上面那些 <code>d</code>是我在擦键盘。根本不会有”我家猫踩到键盘”这种事, 我没有猫了,也找不到家在哪。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我刚刚用约半小时的时间写了一篇流水账。大量直白的描述让我的日记看起来就像是小学生写的一样,
或许我应该含蓄一点, 但是再含蓄就不会有人懂我了。&lt;/p&gt;
&lt;p&gt;所以, 重要的是能够说出来, 无论脑子里是怎样的非结构化文本,
那种很混乱的信息.&lt;/p&gt;
&lt;p&gt;他妈的, 那刺眼的白光还在折磨我温和的暖光,
我甚至一度以为天快亮了。如果到了凌晨时分, 就不需要我再开灯了吧。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;其实, 就这样开着灯对着墙壁发呆也挺好, 但今晚没断电是一切的前提,
如果断了电, 我就只能上去睡觉了。&lt;/p&gt;</summary>
    
    
    
    <category term="杂谈" scheme="https://amiriox.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="日记" scheme="https://amiriox.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>词穷, 但也总比写点废话要好</title>
    <link href="https://amiriox.github.io/2025/09/01/Dairy_250901/"/>
    <id>https://amiriox.github.io/2025/09/01/Dairy_250901/</id>
    <published>2025-09-01T15:04:58.000Z</published>
    <updated>2025-09-01T15:39:07.641Z</updated>
    
    <content type="html"><![CDATA[<p>骗你的, 废话我也写。</p><p>我的大一生活完全地过去了。 我不知道这有什么好忧伤的,但我总是很忧伤。</p><p>我深知连我的年轻也不足以成为我的某种优势,但这样反而让我安心下来。当然, 或许安心的原因并不在这。</p><hr /><p>我爸爸说<span class="math inline">\(^{[1]}\)</span>,当你什么也写不出来的时候就试着描述周围的环境: 一盏台灯,很亮。我没想让它那么亮的, 甚至有点想关掉它;但那样就会让别人的灯照到我自己, 我不喜欢别人的灯, 有些人的灯惨白又刺眼,有些人的灯很温和——但这才是最危险的,这样的灯关上时会比那些扰人的白光关闭时令人惊慌多了。所以,我应该有自己的灯。</p><p>但是, 有一个自己的灯何其不易!</p><p>$[1]: $ 我父亲没有说过这句话, 这实际上是我自己说的。</p><p>我妈妈说<span class="math inline">\(^{[2]}\)</span>,当你什么也写不出来的时候就试着描述你的行为: 我刚把护腰摘下,然后觉得非常疲惫,放弃写题或者其他有意义的事而是开始写日记。为什么我把护腰摘了呢?因为睡觉时是不应当戴着护腰的。不仅如此, 还有很多场景不应当戴着护腰.我不应该戴着护腰去上课, 那样大家会觉得我非常奇怪的;我也不应该太长时间借用这个护腰, 因为借我的人也会不开心。我想,我还应该有一个自己的护腰, 但那样护腰就不是护腰了。</p><p>为什么我会需要一个护腰呢?因为我在刚刚的跑步中运动过量使得腰部非常不舒服。你或许会指责我不懂停下来休息,但事实并非如此: 校园跑不肯记上我的记录,我再一次被世界所拒绝。我不应当被命运所愚弄的,我所侍奉的是更强大的主人。我有时觉得苦痛之神因为可怜我才收留我,但或许不止衪是这样的。</p><p>$[2]: $ 我母亲没有说过这句话, 这实际上是我自己说的。</p><p>我哥哥说<span class="math inline">\(^{[3]}\)</span>,当你什么也写不出来的时候就看看自己。</p><p>是啊, 看看我自己, 我都变成什么样了。其实还好, 但是这里必须写成这样了,不然就平淡得没有任何叙事意义, 我很讨厌那样。我现在脆弱、易怒、疲惫不堪,还用打”顿号”拼音的方式打顿号。还有这个句号。</p><p>我不想审视我自己, 我不喜欢我哥哥。</p><p>$[3]: $ 我没有哥哥。</p><p>我曾经在漫长的写作生涯中总结了一条经验<spanclass="math inline">\(^{[4]}\)</span>, 当我什么都写不出来的时候,我就应该停笔, 无论我有多想再把这篇文章进行下去。</p><p>$[4]: $ 我并不写作, 没有漫长的写作生涯, 也从没总结过写作经验</p><p>所以我现在继续写了。</p><hr /><p>很快我就忘了他们说了些什么, 他们中有些人的话百害而无一利,有些人甚至根本不存在。我应该把精力放在存在的人身上, 这是极为显然的。</p><p>但我也不会在这篇文章里写任何真实存在的人的真实存在的话。你想说这篇文章也算我说出来的话?</p><blockquote><p><code>__ __ __ __ __ __ ?</code></p></blockquote><p>我不知道发生了什么, 也许很糟,也许只是一件小事(但那也不算是小事)。</p><p>今晚也没有熄灯, 这很反常。有人要睡觉, 所以我们还是把灯关上了,但是电还在, 那就还有希望。但是我仍然有一个坏消息:据说这个世界的灯并不是由我们手动开闭的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;骗你的, 废话我也写。&lt;/p&gt;
&lt;p&gt;我的大一生活完全地过去了。 我不知道这有什么好忧伤的,
但我总是很忧伤。&lt;/p&gt;
&lt;p&gt;我深知连我的年轻也不足以成为我的某种优势,
但这样反而让我安心下来。当然, 或许安心的原因并不在这。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我爸爸说&lt;span class=&quot;math inline&quot;&gt;&#92;(^{[1]}&#92;)&lt;/span&gt;,
当你什么也写不出来的时候就试着描述周围的环境: 一盏台灯,
很亮。我没想让它那么亮的, 甚至有点想关掉它;
但那样就会让别人的灯照到我自己, 我不喜欢别人的灯, 有些人的灯惨白又刺眼,
有些人的灯很温和——但这才是最危险的,
这样的灯关上时会比那些扰人的白光关闭时令人惊慌多了。所以,
我应该有自己的灯。&lt;/p&gt;</summary>
    
    
    
    <category term="杂谈" scheme="https://amiriox.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="日记" scheme="https://amiriox.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP Cache Lab 笔记</title>
    <link href="https://amiriox.github.io/2025/08/19/CSAPP-Lab-Cache/"/>
    <id>https://amiriox.github.io/2025/08/19/CSAPP-Lab-Cache/</id>
    <published>2025-08-19T05:21:00.000Z</published>
    <updated>2025-08-19T08:22:50.742Z</updated>
    
    <content type="html"><![CDATA[<p>现代计算机通过每一层都是下一层的缓存的抽象构建出存储器的层次结构,依据程序的局部性原理巧妙解决了存取信息的速度远小于 CPU处理速度的问题.</p><p>前置知识可看: <ahref="https://zheya.cc/2025/02/19/CSAPP-2025-02-20/">CSAPP3e第六章(存储器层次结构)| Amiriox’s Storage</a></p><p>Cache lab 分为两个部分:</p><ol type="1"><li>第一部分写一个模拟程序, 模拟缓存的行为;如果对缓存的原理和行为理解透了难度不高, <del>主要难点是必须用 C写</del></li><li>第二部分是优化一个矩阵转置的函数,转置有着鲜明的”两个数组访问模式相反”的特点,导致必然有一个数组的访问模式缓存不友好.要理解分块技术和缓存冲突不命中的常见情况及调整措施. 这个 lab要求比较极端, 给定的缓存组关联度是 <spanclass="math inline">\(1\)</span>,也就是说只要是同一组的就会冲突不命中抢夺缓存行.</li></ol><p>这是我做起来体感最痛苦的一个, 很多人也有相同的感受. 不过 lab本身是没什么问题的, <del>CMU 是一款我的问题</del></p><h2 id="part-a">Part A</h2><p>首先要组织出缓存的数据结构: 缓存由几组缓存组构成,每组缓存组有一行或多行缓存行构成, 每行缓存行有<strong>标记</strong>,<strong>有效位</strong>, <strong>实际记录信息的块</strong>.</p><h3 id="构造缓存行和时间戳">构造缓存行和时间戳</h3><p>首先构造缓存行, 注意要求的冲突替换策略是 LRU,所以每一行还需要维护一个时间戳判断哪一行需要被踢出</p><p>真的写 UNIX 时间戳又有些麻烦, 我直接维护了一个全局的<code>tick</code>, 每次插入新行时新行的时间戳就是 <code>++tick</code>.这样冲突需要 evict 一行的时候在对应组里找时间戳最小的.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> tick;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> tag;</span><br><span class="line">    <span class="type">int</span> valid;</span><br><span class="line">    <span class="type">int</span> timestamp;   <span class="comment">// hit 和 push 时更新</span></span><br><span class="line">    <span class="type">uint8_t</span> *blocks; <span class="comment">// 实际上不需要</span></span><br><span class="line">&#125; Line;</span><br><span class="line"></span><br><span class="line">Line <span class="title function_">create_line</span><span class="params">(<span class="type">size_t</span> b, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> tag)</span> &#123;</span><br><span class="line">    Line ret;</span><br><span class="line">    ret.tag = tag;</span><br><span class="line">    ret.valid = <span class="number">0</span>;</span><br><span class="line">    ret.timestamp = <span class="number">-1</span>;</span><br><span class="line">    ret.blocks = (<span class="type">uint8_t</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">uint8_t</span>) * b);</span><br><span class="line">    <span class="built_in">memset</span>(ret.blocks, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">uint8_t</span>) * b);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">destory_line</span><span class="params">(Line *line)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!line || !line-&gt;blocks)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">free</span>(line-&gt;blocks);</span><br><span class="line">    line-&gt;blocks = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造缓存组">构造缓存组</h3><p>缓存组需要维护一个大小, 判断何时缓存组满了, 还需要插入一个缓存行 (<code>push_line</code> 的实现后面提及 )</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">size_t</span> line_count;</span><br><span class="line">    Line *lines;</span><br><span class="line">    <span class="comment">// Find line by iterating lines with O(n)</span></span><br><span class="line">    <span class="comment">// CPU 高速缓存上一般有硬件优化, 这里只写了个很朴素的 O(n) 查找</span></span><br><span class="line">&#125; Set;</span><br><span class="line"></span><br><span class="line">Set *<span class="title function_">create_set</span><span class="params">(<span class="type">size_t</span> e, <span class="type">size_t</span> b)</span> &#123;</span><br><span class="line">    Set *ret = (Set *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Set));</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        ret-&gt;line_count = <span class="number">0</span>; <span class="comment">// e;</span></span><br><span class="line">        ret-&gt;lines = (Line *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Line) * e);</span><br><span class="line">        <span class="keyword">if</span> (ret-&gt;lines) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(ret-&gt;lines, <span class="number">0</span>, <span class="keyword">sizeof</span>(Line) * e);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; e; i++) &#123;</span><br><span class="line">                ret-&gt;lines[i] = create_line(b, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">139</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">push_line</span><span class="params">(Set *<span class="built_in">set</span>, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> tag, <span class="type">int</span> e)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">destory_set</span><span class="params">(Set *<span class="built_in">set</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">set</span> || !<span class="built_in">set</span>-&gt;lines)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 这里实际上应该对组里每一行都 destory_line</span></span><br><span class="line">    <span class="comment">// 带 RRID 的语言写习惯了就会对这个不太敏感(并不</span></span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">set</span>-&gt;lines);</span><br><span class="line">    <span class="built_in">set</span>-&gt;lines = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">set</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化缓存">初始化缓存</h3><p>紧接着, 一个缓存包含很多缓存组</p><p>初始化时按照命令行传参进来的 <code>s</code> 计算组数 <spanclass="math inline">\(S = 2^s\)</span>, 直接开好每一组, 每一组也开好行,组大小和有效位都置 <span class="math inline">\(0\)</span></p><p>更健壮更 C 的写法, create_set 应该在失败是返回 <code>NULL</code>,这里内层 <code>for</code>循环如果检查到某个组未能成功初始化还需要回滚之前的元素.这就是由于不同语言的语言特性所造成的不同的写法和思维方式.<del>但是我并不像在一个模拟程序上浪费太多时间</del><del>尽管写这两句话的时间完全足够我把这个修了</del></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">size_t</span> set_count;</span><br><span class="line">    Set **sets;</span><br><span class="line">&#125; Cache;</span><br><span class="line"></span><br><span class="line">Cache *<span class="title function_">init_cache</span><span class="params">(<span class="type">size_t</span> S, <span class="type">size_t</span> e, <span class="type">size_t</span> b)</span> &#123;</span><br><span class="line">    Cache *ret = (Cache *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Cache));</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        ret-&gt;set_count = S;</span><br><span class="line">        ret-&gt;sets = (Set **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Set *) * S);</span><br><span class="line">        <span class="keyword">if</span> (ret-&gt;sets) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; S; i++) &#123;</span><br><span class="line">                ret-&gt;sets[i] = create_set(e, b);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">139</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">destory_cache</span><span class="params">(Cache *cache)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!cache || !cache-&gt;sets)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; cache-&gt;set_count; i++) &#123;</span><br><span class="line">        destory_set(cache-&gt;sets[i]);</span><br><span class="line">        cache-&gt;sets[i] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(cache);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找缓存">查找缓存</h3><p>查找某一个地址的缓存, 需要把地址拆解为<strong>标记位,组索引和偏移量</strong></p><p>如果在对应组找到带有对应标记为的行, 且有效位为 <code>1</code>则是一次 <code>hit</code>, 更新这一行的时间戳</p><p>否则就是一次 <code>miss</code>, 这个 lab 采用写分配策略,无论读不命中还是写不命中都需要加载进缓存, 进行 <code>push_line</code>操作来完成这一点.</p><p>关于获取标记和组索引: 这里最好直接通过位移拆出这三段,如果手写十六进制转十进制可能很痛苦, 因为 <code>s</code>, <code>e</code>,<code>b</code> 都是二进制的位数, 还需要手动对齐一下 (lab没要求真的返回缓存的值, 所以块偏移可以不实现. 到 Part B的时候可以看到这个程序的作用)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标记 | 组索引 | 块偏移</span></span><br><span class="line"><span class="comment">// Set, E-associativity, Block</span></span><br><span class="line"><span class="comment">// ttt sss bbb</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title function_">get_addr_s</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> wrap, <span class="type">int</span> len, <span class="type">int</span> s, <span class="type">int</span> e, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> mask = ((<span class="number">1LL</span> &lt;&lt; s) - <span class="number">1</span>);</span><br><span class="line">    wrap = (wrap &gt;&gt; b) &amp; mask;</span><br><span class="line">    <span class="keyword">return</span> wrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title function_">get_addr_t</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> wrap, <span class="type">int</span> len, <span class="type">int</span> s, <span class="type">int</span> e, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    wrap = wrap &gt;&gt; (s + b);</span><br><span class="line">    <span class="keyword">return</span> wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">find_cache</span><span class="params">(Cache *cache, <span class="type">char</span> *addr, <span class="type">int</span> len, <span class="type">int</span> s, <span class="type">int</span> e, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> wrap = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sscanf</span>(addr, <span class="string">&quot;%llx&quot;</span>, &amp;wrap);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> set_id = get_addr_s(wrap, len, s, e, b);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> tag = <span class="type">get_addr_t</span>(wrap, len, s, e, b);</span><br><span class="line">    Set *<span class="built_in">set</span> = cache-&gt;sets[set_id];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; e; i++) &#123;</span><br><span class="line">        Line *li = &amp;<span class="built_in">set</span>-&gt;lines[i];</span><br><span class="line">        <span class="keyword">if</span> (li-&gt;valid &amp;&amp; li-&gt;tag == tag) &#123;</span><br><span class="line">            hit++;</span><br><span class="line">            li-&gt;timestamp = ++tick;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// should not be executed if hit</span></span><br><span class="line">    miss++;</span><br><span class="line">    push_line(<span class="built_in">set</span>, tag, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入缓存行与替换策略">插入缓存行与替换策略</h3><p><code>push_line</code> 是可能出现冲突不命中和驱逐的情况, 按照 LRU替换缓存行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">push_line</span><span class="params">(Set *<span class="built_in">set</span>, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> tag, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="comment">// WARN: eviction occurs</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">set</span>-&gt;line_count == e) &#123;</span><br><span class="line">        evic++;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> LRU</span></span><br><span class="line">        <span class="type">int</span> lru = <span class="number">0x7fffffff</span>;</span><br><span class="line">        Line *arg = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; e; i++) &#123;</span><br><span class="line">            Line *li = &amp;<span class="built_in">set</span>-&gt;lines[i];</span><br><span class="line">            assert(li-&gt;valid);</span><br><span class="line">            <span class="keyword">if</span> (lru &gt; li-&gt;timestamp) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * &lt; : max(|tick - timestamp|)</span></span><br><span class="line"><span class="comment">                 * timestamp 越大越新, 找最旧也就是最小的</span></span><br><span class="line"><span class="comment">                 * */</span></span><br><span class="line">                lru = li-&gt;timestamp;</span><br><span class="line">                arg = li;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arg) &#123;</span><br><span class="line">            arg-&gt;tag = tag;</span><br><span class="line">            arg-&gt;timestamp = ++tick;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> bad impl</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; e; i++) &#123;</span><br><span class="line">            Line *li = &amp;<span class="built_in">set</span>-&gt;lines[i];</span><br><span class="line">            <span class="keyword">if</span> (!li-&gt;valid) &#123;</span><br><span class="line">                li-&gt;valid = <span class="number">1</span>;</span><br><span class="line">                li-&gt;tag = tag;</span><br><span class="line">                li-&gt;timestamp = ++tick;</span><br><span class="line">                <span class="built_in">set</span>-&gt;line_count++;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理命令行参数">处理命令行参数</h3><p>最后再写个处理命令行参数的. Part A 比较简单, 没有什么好说的.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> opt;</span><br><span class="line"><span class="comment">// int verbose = 0;</span></span><br><span class="line"><span class="type">int</span> s = <span class="number">0</span>, E = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">FILE *trace_file = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((opt = getopt(argc, argv, <span class="string">&quot;vs:E:b:t:&quot;</span>)) != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;v&#x27;</span>:</span><br><span class="line">        <span class="comment">// verbose = 1;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">        s = atoi(optarg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">        E = atoi(optarg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">        b = atoi(optarg);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">        trace_file = fopen(optarg, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Cache *cache = init_cache((<span class="number">1</span> &lt;&lt; s), E, b);</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> parse $trace_file</span></span><br><span class="line"><span class="keyword">if</span> (!trace_file)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">139</span> + <span class="number">1</span>);</span><br><span class="line"><span class="type">char</span> trace[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> ins;</span><br><span class="line"><span class="type">char</span> addr[<span class="number">256</span>];</span><br><span class="line"><span class="type">int</span> blksz;</span><br><span class="line"><span class="keyword">while</span> (fgets(trace, <span class="keyword">sizeof</span>(trace), trace_file)) &#123;</span><br><span class="line">    <span class="built_in">sscanf</span>(trace, <span class="string">&quot; %c %s,%d&quot;</span>, &amp;ins, addr, &amp;blksz);</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(addr);</span><br><span class="line">    <span class="keyword">switch</span> (ins) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">        <span class="comment">// find_cache(cache, addr, len, s, E, b);</span></span><br><span class="line">        <span class="comment">// 指令加载的缓存在 I-Cache, 我们只需要模拟 D-Cache</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">        find_cache(cache, addr, len, s, E, b);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">        find_cache(cache, addr, len, s, E, b);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">        find_cache(cache, addr, len, s, E, b);</span><br><span class="line">        find_cache(cache, addr, len, s, E, b);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printSummary(hit, miss, evic);</span><br></pre></td></tr></table></figure><h2 id="part-b">Part B</h2><p>在 <code>trans.c</code> 中编写缓存友好的转置函数.“缓存友好”的具体要求是对缓存不明中的次数 <spanclass="math inline">\(m\)</span> 满足以下条件:</p><ul><li><span class="math inline">\(32 \times 32: \text{8 points if }m \lt300, \text{ 0 points if } m \gt 600\)</span></li><li><span class="math inline">\(64 \times 64: \text{8 points if }m \lt1,300, \text{ 0 points if } m \gt 2,000\)</span></li><li><span class="math inline">\(61 \times 67: \text{10 points if }m \lt2,000, \text{ 0 points if } m \gt 3,000\)</span></li></ul><p>我一开始没看这个要求, 试图直接写通用的转置函数,在计算缓存访问冲突模式时<em>试图将 <spanclass="math inline">\(4n\)</span> 从十进制转换为二进制</em></p><p>首先观察常规写法的矩阵转置:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">trans</span><span class="params">(<span class="type">int</span> M, <span class="type">int</span> N, <span class="type">int</span> A[N][M], <span class="type">int</span> B[M][N])</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j, tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line">            tmp = A[i][j];</span><br><span class="line">            B[j][i] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析访问模式:</p><ul><li>内循环对于 <code>A</code> 数组元素的读访问是步长为 <spanclass="math inline">\(1\)</span> 的连续访问, 空间局部性良好, 在一次 miss并加载缓存行之后可以连续访问这一缓存行的所有元素直到再次 miss.这是缓存友好的.</li><li>内循环对于 <code>B</code> 数组元素的写访问是步长为 <code>N</code>的跨行访问 (<code>B[j][i]</code> 的下一次访问是<code>B[j + 1][i]</code>, 中间差一行的元素数量), 这导致每次访问 miss后加载的缓存行都不会被再次利用到从而导致每次访问都会 miss,空间局部性很差, 缓存不友好.</li></ul><p>然而, 我们意识到矩阵转置的行列是必然相反的, <code>A</code> 和<code>B</code> 必然呈现相反的访问模式,肯定会有一个数组的访问模式很差</p><p>根据 lab 提供的 pdf 的提示, 考虑<strong>分块策略</strong>.</p><p>缓存友好的分块策略, 是指将一个需要处理的矩阵分为特定 <spanclass="math inline">\(b \times b\)</span> 的小块,在每个小块中进行需要的操作.</p><p>为什么这样能够使得缓存友好呢? 重点就在于 <spanclass="math inline">\(b\)</span> 块大小的选择,选择合适的块大小使得缓存可以装下 <code>A</code> 和 <code>B</code>的一个分块(子矩阵), 这样即使 <code>B</code>的访问模式<strong>依然空间局部性差, 但是时间局部性友好</strong>:缓存足够装下这一小块的多行元素, <code>B</code> 的每次访问都能在缓存中hit.</p><h3 id="x32-与-61x67-分块策略与循环展开">32x32 与 61x67:分块策略与循环展开</h3><p>于是我们可以开始计算如何设计块大小. lab 给定的缓存是 <spanclass="math inline">\(s = 5, E = 1, b = 5\)</span>. 每个地址有 <spanclass="math inline">\(5\)</span> 位的块偏移, 意味着一个缓存行大小为<span class="math inline">\(2^5 = 32\)</span> 字节, 也就是 <spanclass="math inline">\(8\)</span> 个 <spanclass="math inline">\(4\)</span> 字节整型——这暗示我们分块的每一行设置为<span class="math inline">\(8\)</span> 个整型来适配缓存行大小. 同时,每个地址有 <span class="math inline">\(5\)</span> 位组索引, 一共 <spanclass="math inline">\(2^5 = 32\)</span> 组, 一组一行即缓存一共有 <spanclass="math inline">\(32\)</span> 个这样的缓存行,足以装下四个分块了.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BSIZE 8</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> kk = <span class="number">0</span>; kk &lt; N; kk += BSIZE) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> jj = <span class="number">0</span>; jj &lt; M; jj += BSIZE) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = jj; i &lt; min(jj + BSIZE, M); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = kk; j &lt; min(kk + BSIZE, N); j++) &#123;</span><br><span class="line">                B[i][j] = A[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而事情并没这么简单, 这段代码的表现还是比较差. 这是比较反直觉的:既然现在所有元素都在缓存内, 只有少数冷启动的 miss, 剩下都是 hit,那理应是最优了吧? 所以只有一种可能, 并不是所有元素都在缓存内!</p><p>这时通过缓存模拟器, 以 <code>valgrind</code> 生成的<code>trace.f0</code> 为输入模拟缓存, 发现许多 eviction,这才想起来可能有两个元素的地址被映射到同一组内, 由于这个严厉的 <spanclass="math inline">\(E = 1\)</span> 也就是直接映射高速缓存限制,可能会出现很多冲突.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./csim-ref -v -s 5 -E 1 -b 5 -t trace.f0</span><br></pre></td></tr></table></figure><p>但我实在是懒得把十六进制地址转二进制再提取组索引找规律了,所以还是先想一些可能出现的情况:</p><p>回顾文章开头的博客, 我记得我曾经写过这样一段话:</p><blockquote><p>这里块偏移是要求连续所以是最后几位很好理解,但为什么组索引不设置为头部的 位而是分配在中间呢?</p><p>这是因为如果是分配在头部,连续的几个地址就回分配在同一组(比如设置为前两位的话,<code>0x1000</code>, <code>0x1001</code>, <code>0x1010</code>,<code>0x1011</code>这连续四个就分配在同一组了),而缓存每次不命中都会加载一整块相邻的地址,我们希望相邻的地址分散到不同的组,来让缓存加载整个地址空间上尽可能多的地址, 增加缓存效率</p></blockquote><p>缓存的核心就是局部性, 所以块偏移必须连续, 所以必须放在最后几位;而组索引的要求是相邻的最好不放在同一组以减少冲突,所以也放在尽可能靠后的位 (块偏移位前). 但是这也可能不够,如果”相邻”的要求扩大, 比如我们需要在一个分块内都尽可能不分在同一组,就可能不太满足了.</p><p>考虑一下 <code>A</code> 的两次访问之间的地址差值: <code>A[j]</code>到 <code>A[j + 1]</code> 是跨行访问, 地址差距是 <spanclass="math inline">\(4 \times M\)</span>, 即元素大小乘以行元素数量.对于 <span class="math inline">\(32\times32\)</span> 的矩阵, 地址差距是<span class="math inline">\(4 \times 32 = 128\)</span>.</p><p>对每次访问的偏移计算组索引 <span class="math inline">\((128)_{10} =(10000000)_2\)</span>, 组索引位是 <code>100</code> 也就是每次 <spanclass="math inline">\(+4\)</span>. 相邻两次访问 <code>A</code>数组元素地址, 组索引的变化为 <span class="math inline">\(4, 8, 12, 16,20, 24, 28, 32\)</span>, 在 <span class="math inline">\(8\)</span>次内是不会从组索引位溢出导致冲突到 <span class="math inline">\(4 ,8,...\)</span> 的 (如果再 <span class="math inline">\(+4\)</span> 相当于模<span class="math inline">\(32\)</span>,因为进位超出了组索引的位到了标记位).</p><p>由于我们的分块每一行长度是 <span class="math inline">\(8\)</span>,<span class="math inline">\(8\)</span>次访问后已经无需再维持这一行的缓存了, 即使冲突了直接丢弃也没关系.<br />虽然对当前研究的问题没有帮助, 但是通过同样的方法计算 <spanclass="math inline">\(64\times64\)</span> 的矩阵,发现会出现数组内部冲突的情况, 每四次访问就会冲突,这给了我们一些警示.</p><p>tips: 如果懒得换算可以直接把 gdb 当进制转换器用. <code>/t</code>,<code>/d</code>, <code>/x</code> 分别是以二进制, 十进制,十六进制形式输出, Bomb lab 时的小技巧</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p /t 128</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">1 = 10000000</span></span><br></pre></td></tr></table></figure><p>既然 <code>A</code> 自己内部不会有冲突, 那会不会是 <code>A</code> 和<code>B</code> 的某些元素地址映射到了同一行? 这里 lab 的 pdf其实给了一些提示 (好像是阅读资料里给的):<strong>对角线上可能会出现大量冲突</strong></p><p>我研究了一会其实没弄明白, 查阅资料后发现在分块的方法中,如果这个分块位于整体矩阵的对角线上 (<span class="math inline">\(kk =jj\)</span> 时), 就会产生读 <span class="math inline">\(A[x][x]\)</span>写 <span class="math inline">\(B[x][x]\)</span> 的情况,这两者的元素地址是极大概率映射到同一组的.</p><p>所以就需要尽可能延长读 <span class="math inline">\(A[x][x]\)</span>和写 <code>B[x][x]</code> 这两个操作的距离, 使得 <code>A</code>全部读进(缓存被充分使用, 可以被驱逐丢弃了)后, 再进行写 <code>B</code>的操作, 此时即使冲突, <code>B</code> 也可以放心驱逐 <code>A</code>的缓存行, 因为未来不会再用到了, 不会出现以后读 <code>A</code>还映射到这一缓存行导致 <code>A</code> 和 <code>B</code>交替抢夺这一缓存行的情况.<strong>采用局部变量和循环展开分离读写操作:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BSIZE 8</span></span><br><span class="line"><span class="type">int</span> a, b, c, d, e, f, g, h;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> kk = <span class="number">0</span>; kk &lt; N; kk += BSIZE) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> jj = <span class="number">0</span>; jj &lt; M; jj += BSIZE) &#123;</span><br><span class="line">        <span class="comment">// a chunk with left-top corner (kk, jj)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = jj; i &lt; min(jj + BSIZE, M); i++) &#123;</span><br><span class="line">            <span class="comment">// 写 A</span></span><br><span class="line">            <span class="keyword">if</span> (kk + <span class="number">0</span> &lt; N)</span><br><span class="line">                a = A[kk][i];</span><br><span class="line">            <span class="keyword">if</span> (kk + <span class="number">1</span> &lt; N)</span><br><span class="line">                b = A[kk + <span class="number">1</span>][i];</span><br><span class="line">            <span class="keyword">if</span> (kk + <span class="number">2</span> &lt; N)</span><br><span class="line">                c = A[kk + <span class="number">2</span>][i];</span><br><span class="line">            <span class="keyword">if</span> (kk + <span class="number">3</span> &lt; N)</span><br><span class="line">                d = A[kk + <span class="number">3</span>][i];</span><br><span class="line">            <span class="keyword">if</span> (kk + <span class="number">4</span> &lt; N)</span><br><span class="line">                e = A[kk + <span class="number">4</span>][i];</span><br><span class="line">            <span class="keyword">if</span> (kk + <span class="number">5</span> &lt; N)</span><br><span class="line">                f = A[kk + <span class="number">5</span>][i];</span><br><span class="line">            <span class="keyword">if</span> (kk + <span class="number">6</span> &lt; N)</span><br><span class="line">                g = A[kk + <span class="number">6</span>][i];</span><br><span class="line">            <span class="keyword">if</span> (kk + <span class="number">7</span> &lt; N)</span><br><span class="line">                h = A[kk + <span class="number">7</span>][i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 写 B</span></span><br><span class="line">            <span class="keyword">if</span> (kk + <span class="number">0</span> &lt; N)</span><br><span class="line">                B[i][kk] = a;</span><br><span class="line">            <span class="keyword">if</span> (kk + <span class="number">1</span> &lt; N)</span><br><span class="line">                B[i][kk + <span class="number">1</span>] = b;</span><br><span class="line">            <span class="keyword">if</span> (kk + <span class="number">2</span> &lt; N)</span><br><span class="line">                B[i][kk + <span class="number">2</span>] = c;</span><br><span class="line">            <span class="keyword">if</span> (kk + <span class="number">3</span> &lt; N)</span><br><span class="line">                B[i][kk + <span class="number">3</span>] = d;</span><br><span class="line">            <span class="keyword">if</span> (kk + <span class="number">4</span> &lt; N)</span><br><span class="line">                B[i][kk + <span class="number">4</span>] = e;</span><br><span class="line">            <span class="keyword">if</span> (kk + <span class="number">5</span> &lt; N)</span><br><span class="line">                B[i][kk + <span class="number">5</span>] = f;</span><br><span class="line">            <span class="keyword">if</span> (kk + <span class="number">6</span> &lt; N)</span><br><span class="line">                B[i][kk + <span class="number">6</span>] = g;</span><br><span class="line">            <span class="keyword">if</span> (kk + <span class="number">7</span> &lt; N)</span><br><span class="line">                B[i][kk + <span class="number">7</span>] = h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> BSIZE</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>模拟一下, <span class="math inline">\(kk == jj\)</span> 时,对于内循环第一次迭代 <span class="math inline">\(i = jj\)</span></p><ul><li>上面读 <code>A</code> 的一列的第一个 <code>if</code> 就会变成<code>a = A[kk][jj]</code> 也就是对角线上的的 <code>A[x][x]</code></li><li>上面写 <code>B</code> 的一行的第一个 <code>if</code> 就会变成<code>B[jj][kk] = a</code> 同上</li><li><code>A[x][x]</code> 和 <code>B[x][x]</code>的地址大概率映射在同一组上, 而对于 <span class="math inline">\(E =1\)</span> 的直接映射缓存, 只有一个缓存行, 所以 <code>A</code> 的第<span class="math inline">\(x\)</span> 行会和 <code>B</code> 的第 <spanclass="math inline">\(x\)</span> 行冲突在统一缓存行, <code>B</code>会因为冲突残忍地把 <code>A</code> 这一整行踢出缓存行</li><li>内循环第二次迭代 <code>i = jj + 1</code> 时, <code>A[kk]</code>这一整行的缓存就没有了, 但是得益于循环展开带来的读写分离, <code>A</code>这一行的缓存每次大循环只会 miss 一次. 如果不循环展开, 写完整的循环,小循环每次迭代, <code>A</code> 和 <code>B</code>都会反复争抢一个缓存行</li><li>非对角线块不会出现这个情况, 因为读写的缓存行没有交集, 不会冲突</li></ul><p>于是 <span class="math inline">\(32 \times 32\)</span>的情况顺利过了(实际上我走了很多弯路, 在错误的思路上浪费了很多时间),顺便还过了个 <span class="math inline">\(61\times67\)</span> 的,这个应该主要考察分块遇到不规整的情况是否能满足, 由于我们写的是<code>&lt; min(jj + BSIZE, M)</code>, 所以可以正常处理边角上的元素,也不会越界.</p><h3 id="x64-防止冲突的访问顺序">64x64: 防止冲突的访问顺序</h3><p>然而真正的难点才刚开始, <span class="math inline">\(64\times64\)</span> 的矩阵有一些问题需要解决. 虽然上述代码也能取得一些分数,但是看 miss 远不能拿到满分</p><p>首先是上述说的 <code>A</code> 的访问冲突模式, 对于 <spanclass="math inline">\(64\times64\)</span>, 矩阵行元素增多一倍,使得冲突频率也增多一倍: 每 <span class="math inline">\(4\)</span>次相邻访问 <code>A</code> (<code>A[i]</code> 和 <code>A[i+4]</code>)就会造成冲突.</p><p>最直观的想法肯定是把 <code>BSIZE</code> 改为 <spanclass="math inline">\(4\)</span>, 然后修改一下循环展开的地方删掉读<code>A</code> 和写 <code>B</code> 的后四行. 可惜这样并不能拿到满分,甚至分数还低了一些. 动脑子想一下, 一个缓存行能容纳 <spanclass="math inline">\(8\)</span> 个元素, 如果分块的一行只有 <spanclass="math inline">\(4\)</span> 个元素,那每个缓存行的有效利用率只有一半, 所以还是要考虑 <spanclass="math inline">\(\text{BSIZE} = 8\)</span> 的方案</p><p>呃, 我实际上没考虑出来. 折腾了很久后最后失去心气,在耻辱地参阅了他人的做法后大概逆向出了这种做法的逻辑:</p><p><span class="math inline">\(8 \times 8\)</span> 的结论是对的,但是到第五行时还是 <code>A[0]</code> 会和 <code>A[4]</code> 冲突,所以需要一种方案能够在 <span class="math inline">\(8\times 8\)</span>的分块内<strong>以能够充分利用缓存的方式再分部分处理</strong>.</p><p>对于前 <span class="math inline">\(4\)</span> 行(分块的上半部分),我们需要在充分利用这 <span class="math inline">\(4\)</span>行缓存后再去碰下半部分,<strong>只有在已经用不到上半部分缓存之后才能访问下半部分,加载下半部分缓存</strong>, 否则就会出现冲突不命中.</p><p>首先转置并复制 <code>A</code> 的这前 <spanclass="math inline">\(4\)</span> 行到 <code>B</code> 的前 <spanclass="math inline">\(4\)</span> 行, 此时 <code>A</code> 和<code>B</code> 的上半部分都在缓存中, 且<code>A</code>的上半部分缓存已经没什么用了可以放心踢出</p><p>但实际上在前四行中, <code>A</code> 右上角的 <spanclass="math inline">\(2 \times 2\)</span> 块应当被转置到 <code>B</code>的左下角, 所以目前 <code>B</code> 右上角的位置是错误的, 需要把这 <spanclass="math inline">\(4\)</span> 个数试图放到 <code>B</code>的正确位置(左下角); 假设我们真的这么做了, 下一步就应该是把<code>A</code> 的左下角复制到 <code>B</code> 的右上角,我们审视一下这个操作的缓存友好性:</p><ul><li><code>A</code> 的上半部分缓存没有用了, 可以放心踢出, 所以访问<code>A</code> 的下半部分是合理的.</li><li>之前修正 <code>B</code> 右上角到左下角时踢出了上半部分的缓存,导致我们现在再写入 <code>B</code> 的右上角时需要重新加载缓存, 而后面再写<code>B</code> 的右下角有需要加载上半部分缓存, 总结来说就是:加载上半部分-&gt;踢上半部分并加载下半部分-&gt;踢下半部分并加载上半部分-&gt;踢下半部分并加载上半部分,出现缓存抖动.</li></ul><p>所以那 <span class="math inline">\(4\)</span>个错误的数需要先用局部变量存起来, 尽可能等上半部分利用完毕再执行修正</p><p>先把 <code>A</code> 的左下角复制到 <code>B</code> 的右上角,再从局部变量恢复 <code>B</code> 的左下角, 此时 <code>B</code>的上半部分没用了, <code>B</code> 的下半部分才初次进入缓存.</p><p>最后只需要把 <code>A</code> 的右下角转置到 <code>B</code>的右下角收尾即可.</p><p>需要注意的是 <code>A</code> 的 <span class="math inline">\((kk,jj)\)</span> 块要转置到 <code>B</code> 的 <spanclass="math inline">\((jj, kk)\)</span> 块</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BSIZE 8</span></span><br><span class="line"><span class="type">int</span> a, b, c, d, e, f, g, h;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> kk = <span class="number">0</span>; kk &lt; N; kk += BSIZE) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> jj = <span class="number">0</span>; jj &lt; M; jj += BSIZE) &#123;</span><br><span class="line">        <span class="comment">// 还是 8 * 8, 但是要对每一分块再分块</span></span><br><span class="line">        <span class="comment">// 先复制前四行, 因为第五行会出现 A[0] 和 A[4] 冲突</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            a = A[kk + i][jj + <span class="number">0</span>];</span><br><span class="line">            b = A[kk + i][jj + <span class="number">1</span>];</span><br><span class="line">            c = A[kk + i][jj + <span class="number">2</span>];</span><br><span class="line">            d = A[kk + i][jj + <span class="number">3</span>];</span><br><span class="line">            e = A[kk + i][jj + <span class="number">4</span>];</span><br><span class="line">            f = A[kk + i][jj + <span class="number">5</span>];</span><br><span class="line">            g = A[kk + i][jj + <span class="number">6</span>];</span><br><span class="line">            h = A[kk + i][jj + <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">            B[jj + <span class="number">0</span>][kk + i] = a;</span><br><span class="line">            B[jj + <span class="number">1</span>][kk + i] = b;</span><br><span class="line">            B[jj + <span class="number">2</span>][kk + i] = c;</span><br><span class="line">            B[jj + <span class="number">3</span>][kk + i] = d;</span><br><span class="line">            B[jj + <span class="number">0</span>][kk + <span class="number">4</span> + i] = e;</span><br><span class="line">            B[jj + <span class="number">1</span>][kk + <span class="number">4</span> + i] = f;</span><br><span class="line">            B[jj + <span class="number">2</span>][kk + <span class="number">4</span> + i] = g;</span><br><span class="line">            B[jj + <span class="number">3</span>][kk + <span class="number">4</span> + i] = h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// A 的前四行, B 的前四行都在缓存里</span></span><br><span class="line">        <span class="comment">// A 的前四行已经没用了, 可以直接踢出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 缓冲 B 的右上角(此时位置错误)</span></span><br><span class="line">            <span class="comment">// hit B 第 i 行一行后半的缓存</span></span><br><span class="line">            a = B[jj + i][kk + <span class="number">4</span> + <span class="number">0</span>];</span><br><span class="line">            b = B[jj + i][kk + <span class="number">4</span> + <span class="number">1</span>];</span><br><span class="line">            c = B[jj + i][kk + <span class="number">4</span> + <span class="number">2</span>];</span><br><span class="line">            d = B[jj + i][kk + <span class="number">4</span> + <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// A 的左下角转置并正确放置到 B 的右上角</span></span><br><span class="line">            <span class="comment">// evict A 前四行的缓存, 加载/hit 后四行</span></span><br><span class="line">            <span class="comment">// hit B 第 i 行一行后半的缓存</span></span><br><span class="line">            e = A[kk + <span class="number">4</span> + <span class="number">0</span>][jj + i];</span><br><span class="line">            f = A[kk + <span class="number">4</span> + <span class="number">1</span>][jj + i];</span><br><span class="line">            g = A[kk + <span class="number">4</span> + <span class="number">2</span>][jj + i];</span><br><span class="line">            h = A[kk + <span class="number">4</span> + <span class="number">3</span>][jj + i];</span><br><span class="line">            B[jj + i][kk + <span class="number">4</span>] = e;</span><br><span class="line">            B[jj + i][kk + <span class="number">4</span> + <span class="number">1</span>] = f;</span><br><span class="line">            B[jj + i][kk + <span class="number">4</span> + <span class="number">2</span>] = g;</span><br><span class="line">            B[jj + i][kk + <span class="number">4</span> + <span class="number">3</span>] = h;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 此时 B 的第 i 行缓存已经没用了, 可以直接踢出</span></span><br><span class="line">            <span class="comment">// 恢复 B 的右上角到正确的位置(左下)</span></span><br><span class="line">            <span class="comment">// evict B 第 i 行的缓存, 加载第 i + 4 行</span></span><br><span class="line">            B[jj + i + <span class="number">4</span>][kk + <span class="number">0</span>] = a;</span><br><span class="line">            B[jj + i + <span class="number">4</span>][kk + <span class="number">1</span>] = b;</span><br><span class="line">            B[jj + i + <span class="number">4</span>][kk + <span class="number">2</span>] = c;</span><br><span class="line">            B[jj + i + <span class="number">4</span>][kk + <span class="number">3</span>] = d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 还剩 B 的右下角</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// A 的下半部分第 i 行</span></span><br><span class="line">            a = A[kk + <span class="number">4</span> + i][jj + <span class="number">4</span> + <span class="number">0</span>];</span><br><span class="line">            b = A[kk + <span class="number">4</span> + i][jj + <span class="number">4</span> + <span class="number">1</span>];</span><br><span class="line">            c = A[kk + <span class="number">4</span> + i][jj + <span class="number">4</span> + <span class="number">2</span>];</span><br><span class="line">            d = A[kk + <span class="number">4</span> + i][jj + <span class="number">4</span> + <span class="number">3</span>];</span><br><span class="line">            <span class="comment">// B 的下半部分 4 行</span></span><br><span class="line">            B[jj + <span class="number">4</span> + <span class="number">0</span>][kk + <span class="number">4</span> + i] = a;</span><br><span class="line">            B[jj + <span class="number">4</span> + <span class="number">1</span>][kk + <span class="number">4</span> + i] = b;</span><br><span class="line">            B[jj + <span class="number">4</span> + <span class="number">2</span>][kk + <span class="number">4</span> + i] = c;</span><br><span class="line">            B[jj + <span class="number">4</span> + <span class="number">3</span>][kk + <span class="number">4</span> + i] = d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 妈的终于过了, 我快写死了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> BSIZE</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;现代计算机通过每一层都是下一层的缓存的抽象构建出存储器的层次结构,
依据程序的局部性原理巧妙解决了存取信息的速度远小于 CPU
处理速度的问题.&lt;/p&gt;
&lt;p&gt;前置知识可看: &lt;a href=&quot;https://zheya.cc/2025/02/19/CSAPP-2025-02-20/&quot;&gt;CSAPP3e第六章(存储器层次结构)
| Amiriox’s Storage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cache lab 分为两个部分:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;第一部分写一个模拟程序, 模拟缓存的行为;
如果对缓存的原理和行为理解透了难度不高, &lt;del&gt;主要难点是必须用 C
写&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;第二部分是优化一个矩阵转置的函数,
转置有着鲜明的”两个数组访问模式相反”的特点,
导致必然有一个数组的访问模式缓存不友好.
要理解分块技术和缓存冲突不命中的常见情况及调整措施. 这个 lab
要求比较极端, 给定的缓存组关联度是 &lt;span class=&quot;math inline&quot;&gt;&#92;(1&#92;)&lt;/span&gt;,
也就是说只要是同一组的就会冲突不命中抢夺缓存行.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这是我做起来体感最痛苦的一个, 很多人也有相同的感受. 不过 lab
本身是没什么问题的, &lt;del&gt;CMU 是一款我的问题&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="组成原理" scheme="https://amiriox.github.io/categories/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="计算机科学" scheme="https://amiriox.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="CSAPP/cmu15213" scheme="https://amiriox.github.io/tags/CSAPP-cmu15213/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP Data Lab 笔记</title>
    <link href="https://amiriox.github.io/2025/08/17/CSAPP-Lab-Data/"/>
    <id>https://amiriox.github.io/2025/08/17/CSAPP-Lab-Data/</id>
    <published>2025-08-17T12:57:00.000Z</published>
    <updated>2025-08-19T08:08:39.540Z</updated>
    
    <content type="html"><![CDATA[<p>禁用大量常见运算符,强制规定特定位运算运算符和运算符数量限制实现特定运算</p><p>所谓 Hacker’s Delight</p><p>在写 CSAPP Lab 之前一定要仔细阅读文档, 一行要求都不能落下, 比如这个lab 就有一些无聊的要求:</p><ol type="1"><li>要求变量声明必须在开头(这 C89 古董规则太搞了)</li><li>不允许使用大字面量(超过 <code>0xFF</code> 的)</li></ol><p>为了您的阅读方便, 本文对于特定位/位模式采用行内引用 (<code>0</code>或 <code>1</code>, <code>1000</code>, <code>1101</code>),对于数字的十进制值, 位的编号等采用 <spanclass="math inline">\(\LaTeX\)</span> 的数字字体 (<spanclass="math inline">\(3, 4, 5, 6\)</span>)</p><span id="more"></span><h2 id="x1-bitxor">0x1 bitXor</h2><p>实现位运算的异或</p><p>众所周知 <span class="math inline">\(x \oplus y = (x \wedge \lnot y)\vee (\lnot x \wedge y)\)</span></p><p>取两次反, 德摩根定律化简 <span class="math inline">\(\lnot (\lnot (x\oplus y)) = \lnot (\lnot(x \wedge \lnot y) \wedge \lnot (\lnot x \wedgey))\)</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">bitXor</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123; <span class="keyword">return</span> ~(~(~x &amp; y) &amp; ~(x &amp; ~y)); &#125;</span><br></pre></td></tr></table></figure><p>收获: <del>没有</del> 德摩根定律其实是能化简一些逻辑表达式的,但是在这个例子中完全体现不出来. <del>所以还是没有</del></p><h2 id="x2-tmin">0x2 tmin</h2><p>返回 <span class="math inline">\(32\)</span> 位补码能表示的最小值.补码的最高位是负权重, 其他位都是正权重, 所以就是最高位为<code>1</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">tmin</span><span class="params">(<span class="type">void</span>)</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>; &#125;</span><br></pre></td></tr></table></figure><p>如果对左移的位数有点反应不过来, 可以这样想: <spanclass="math inline">\(32\)</span> 位补码的 <spanclass="math inline">\(32\)</span> 位从低到高编号 <spanclass="math inline">\(0 \sim 31\)</span>, 对于 <code>1 &lt;&lt; n</code>就是向左移动 <span class="math inline">\(n\)</span> 位从最低位 <spanclass="math inline">\(0\)</span> 位移动到编号为 <spanclass="math inline">\(n\)</span> 的那一位上.</p><p>收获: <del>没有.</del> 没有。</p><h2 id="x3-istmax">0x3 isTmax</h2><p>判断 <code>x</code> 是否是 <span class="math inline">\(32\)</span>位补码能表示的最大值. <span class="math inline">\(32\)</span>位补码能表示的最大值是最高位为 <code>0</code>, 其他位为 <code>1</code>的 <code>01111...</code>, <strong>纯按照位模式</strong> <spanclass="math inline">\(+ 1\)</span> 后即为 <code>10000...</code>(补码最小值), 但是注意这在标准 C 中是未定义行为,我想了很久也查阅了很多做法都没有得到可以不依赖 UB 的解决方案,这某种程度上算这个 lab 的败笔.</p><p>回到正题, 注意到 <span class="math inline">\(\text{Tmax} + 1\)</span>正好是 <span class="math inline">\(\text{Tmin}\)</span>, 而 <spanclass="math inline">\(\text{Tmax}\)</span> 和 <spanclass="math inline">\(\text{Tmin}\)</span> 的位模式恰好全部相反,直接比较 <code>~(x + 1)</code> 是否等于 <code>x</code> 即可,但注意除了后面几个浮点数的题目, 所有题目都是禁用比较运算符的,所以只能用异或再取反实现.</p><p><del>然后我跑了一下发现没过。</del> 除了这个, 全 <spanclass="math inline">\(1\)</span> 的位模式 <code>11111...</code> 在 <spanclass="math inline">\(+1\)</span> 后是 <code>00000...</code>,同样完全相反, 所以要特判一下 <span class="math inline">\(x\)</span> 不是<code>~0</code> (<code>11111...</code>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isTmax</span><span class="params">(<span class="type">int</span> x)</span> &#123; <span class="keyword">return</span> !(~(x + <span class="number">1</span>) ^ x) &amp; !!(x ^ ~<span class="number">0</span>); &#125;</span><br></pre></td></tr></table></figure><p>收获:</p><ol type="1"><li>用 <code>!(x ^ y)</code> 判断 <code>x == y</code>, 相对地, 用<code>!!(x ^ y)</code> 判断 <code>x != y</code></li><li>判断某些特殊值可以考虑通过特殊值进行某些运算(<spanclass="math inline">\(+1\)</span>, <spanclass="math inline">\(-1\)</span> 等)后的特殊性,但是要注意满足这个特殊性的不一定就是这个特殊值</li><li><code>~0</code> 表示全 <code>1</code> 的位模式, 记住这个<code>~0</code>, 后面还会用到的</li></ol><h2 id="x4-alloddbits">0x4 allOddBits</h2><p>如果 <span class="math inline">\(x\)</span> 的全部编号为奇数的位都是<code>1</code>, 返回 <span class="math inline">\(1\)</span>, 否则返回<span class="math inline">\(0\)</span></p><p>这个通过上一题的特殊运算很难<strong>大规模改变很多位以形成特殊值</strong>,</p><p>但是要求本身具有特定的模式<code>1*1*1*1*1*1*1*</code>,所以是掩码发挥长处的地方</p><p>构造一个掩码<code>mask = 1010 1010 1010 1010 1010 1010 1010 1010</code>来表示要判断的模式</p><p>但这里其实还剩一个点: 偶数位是不做要求的, <code>&amp;</code> 与<code>1</code> 运算不改变但是与 <code>0</code> 运算改变原值, 所以应该用<code>|</code>, 与 <code>0</code> 运算不改变原值但是与 <code>1</code>运算改变原值 (不进位加法). 所以如果 <code>x</code> 的奇数位上都是<code>1</code>, <code>(x | mask)</code> 将不会改变任何位,根据上一题的收获 <code>!(x ^ y)</code> 判断是否相等,就得到了解决方案</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">allOddBits</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> mask = <span class="number">0xAA</span>;</span><br><span class="line">    <span class="comment">// 1010 1010</span></span><br><span class="line">    mask |= (mask &lt;&lt; <span class="number">8</span>);</span><br><span class="line">    <span class="comment">// 1010 1010 1010 1010</span></span><br><span class="line">    mask |= (mask &lt;&lt; <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> !((x | mask) ^ x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收获:</p><ol type="1"><li>根据运算符的特性, 使用特定运算符</li><li>掩码的构造与应用 但是对字面量的 &lt; 256限制又导致掩码在后面的题没什么优势区间了 <del>所以这个 lab经常左右脑互搏, 感觉是助教出的</del></li></ol><h2 id="x5-negate">0x5 negate</h2><p>取负数, 最简单的一个<del>让我想起了我还是选手时写快读的快速(乐)时光</del></p><p>可以写 <code>~x + 1</code> (补码等于反码加一) 也可以写<code>~(x - 1)</code>, 我当时的快读板子都是后者</p><p>简单证明: 令 <code>y = x + 1</code>,<code>~(x - 1) + 1= ~y + 1 = -y = -(x - 1) = -x + 1</code></p><p>不过我觉得对于极端值可能会有溢出的问题, 还是随手写前者了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">negate</span><span class="params">(<span class="type">int</span> x)</span> &#123; <span class="keyword">return</span> ~x + <span class="number">1</span>; &#125;</span><br></pre></td></tr></table></figure><p>收获: <del>没有</del><del>一个很绝妙而且这里空白很大写的下的证明</del><code>-x = ~x + 1</code>, 这个后面很有用</p><h2 id="x6-isasciidigit">0x6 isAsciiDigit</h2><p>判断是否为 ASCII 数字 <span class="math inline">\(0 \sim 9\)</span>,也就是 <code>0x30</code> 到 <code>0x39</code></p><p>写出对应二进制, 发现高两位都是 <code>1</code>, 初步判断<code>x &gt;&gt; 4</code> 是否等于 <span class="math inline">\((11)_2 =3_{10}\)</span></p><p>剩下四位是 <code>0000</code>, <code>0001</code>, ..,<code>0111</code> 或 <code>1000</code>, <code>1001</code>.</p><p>首先 <code>!((x &gt;&gt; 3) &amp; 1)</code>通过右移提取第三位并判断是否为 <code>0</code>, 这样 <code>0000</code>,.., <code>0111</code> 都匹配上了</p><p>然后对于 <code>1</code> 为最高位的后四位, 也就有 <code>1000</code> 和<code>1001</code>, 只需要判断中间两位全为 0 即可, 也就是中间两位不全为<code>1</code>, <code>(x &amp; 0b0110)</code> 意味着中间两位全为<code>1</code>, <code>not</code> 一下就是不全为 <code>1</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isAsciiDigit</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> zero = <span class="number">0x30</span>; <span class="comment">// 0b 110000</span></span><br><span class="line">    <span class="type">int</span> nine = <span class="number">0x39</span>; <span class="comment">// 0b 111001</span></span><br><span class="line">                     <span class="comment">// 0b 11****</span></span><br><span class="line">                     <span class="comment">//      0110</span></span><br><span class="line">    <span class="keyword">return</span> (!((x &gt;&gt; <span class="number">4</span>) ^ <span class="number">3</span>)) &amp; (!((x &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) | !(x &amp; <span class="number">6</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收获:</p><ol type="1"><li>右移 <span class="math inline">\(n\)</span> 位并与 <spanclass="math inline">\(1\)</span> (<code>...0001</code>) 运算提取并判断第<span class="math inline">\(n\)</span> 位</li><li>遇到判断范围的, 观察位模式进行匹配就行了, 难度不大</li></ol><h2 id="x7-conditional">0x7 conditional</h2><p>用位运算实现条件判断, 根据 <span class="math inline">\(x\)</span>的真假条件返回 <span class="math inline">\(y\)</span> 或 <spanclass="math inline">\(z\)</span></p><p>根据 “非 <span class="math inline">\(0\)</span> 为真” 的原则, 为<span class="math inline">\(1, 2, 3, 4, ...\)</span> 等任意非 <spanclass="math inline">\(0\)</span> 的数都应该算作真, 我们先<code>!!x</code>, 把不规则的真值统一为全一的位模式 (当然如果<code>x == 0</code> 那就不会变)</p><p>然后就是经典的<code>(cond &amp; if_statement) | (~cond &amp; else_statement)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">conditional</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">    <span class="type">int</span> xp = ~(!!x + ~<span class="number">0</span>); <span class="comment">// =0000 if x=0000; =1111 if x has 1;</span></span><br><span class="line">                          <span class="comment">// replace `-1` with `+ ~0`</span></span><br><span class="line">    <span class="keyword">return</span> (y &amp; xp) | (z &amp; ~xp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收获: 这两个无论是 lab 里还是实际应用中都挺重要的。</p><ol type="1"><li>两次 <code>!</code> 统一不规则值</li><li><code>(cond &amp; if_statement) | (~cond &amp; else_statement)</code></li></ol><h2 id="x8-islessorequal">0x8 isLessOrEqual</h2><p>从这里开始整数部分的运算就开始逐渐有一些坑了, 9 和 10更是开始上难度</p><p>首先抛开特殊情况之外考虑还是很简单的, 用 <code>x + ~y + 1</code> 表示<code>x - y</code>, 判断这个值小于等于 <spanclass="math inline">\(0\)</span> 即可, 也就是要么是 <spanclass="math inline">\(0\)</span> 要么符号位为 <code>1</code></p><p>然后跑了一遍没过, 试了几个值才想起来 <span class="math inline">\(x,y\)</span> 符号位可能相反导致计算溢出,这个时候直接提取符号位然后用上面的位级条件语句特判一下就行了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isLessOrEqual</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="type">int</span> signx = !!(x &amp; (<span class="number">1</span> &lt;&lt; <span class="number">31</span>));</span><br><span class="line">    <span class="type">int</span> signy = !!(y &amp; (<span class="number">1</span> &lt;&lt; <span class="number">31</span>));</span><br><span class="line">    <span class="type">int</span> diff = (signx ^ signy);</span><br><span class="line">    <span class="type">int</span> d = x + ~y + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (diff &amp; (signx &amp; !signy)) | (~diff &amp; (!!(d &amp; (<span class="number">1</span> &lt;&lt; <span class="number">31</span>)) | !d));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收获:</p><ol type="1"><li>要考虑多种情况, 尤其是可能导致溢出的情况</li><li>草</li></ol><h2 id="x9-logicalneg">0x9 logicalNeg</h2><p>实现逻辑 NOT, 当然出题人没那么好忽悠, 这题特殊把 <code>!</code>禁用了</p><p>NOT 也是一个把不规则值统一的运算, 我选择的是先 <code>lowbit</code>操作获取最低位 (<code>lowbit</code> 是一个比较常见的操作,我第一次接触是在学树状数组的时候), 此时如果原值是 <spanclass="math inline">\(0\)</span> 那么 <code>lowbit</code> 就是 <spanclass="math inline">\(0\)</span>, 否则就是 <code>...0001000...</code>,(特别地, 对于 <span class="math inline">\(\text{Tmin}\)</span>,<code>lowbit</code> 为 <code>10000...</code>, 对于 <spanclass="math inline">\(1\)</span>, <code>lowbit</code> 为<code>...00001</code>).</p><p>但这样还不够统一, 我们最后要统一归类到 <spanclass="math inline">\(0\)</span> 和 <spanclass="math inline">\(1\)</span> (NOT 只会返回 <spanclass="math inline">\(0\)</span> 或 <spanclass="math inline">\(1\)</span>). 注意到非 <spanclass="math inline">\(0\)</span> 值的 <code>lowbit</code> 除了 <spanclass="math inline">\(\text{Tmin}\)</span> 以外都是$ $ 的正数, 考虑<span class="math inline">\(-1\)</span> 运算, 使得正数<code>lowbit</code> 变为 $ $ 的非负整数, 特殊值 <spanclass="math inline">\(\text{Tmin}\)</span> 在大多数环境下也会环绕到正数<span class="math inline">\(\text{Tmax}\)</span> (注意这里还是一个 UB!),但若 <code>lowbit</code> 为 <span class="math inline">\(0\)</span>,<span class="math inline">\(-1\)</span> 后就会变成负数,此时检查符号位再转换一下即可.</p><p>不过想到这还有一个问题, 就是这个右移是分算术右移和逻辑右移的,逻辑右移不考虑计算, 高位直接补 <code>0</code>,而算术右移是对于正数高位补 <code>0</code>, 对于负数高位补<code>1</code>. (由于 C 规定 <code>&gt;&gt;</code> 是算术右移) 所以<code>((lowbit + ~0) &gt;&gt; 31)</code> 的可能值为 <spanclass="math inline">\(0\)</span> 或 <spanclass="math inline">\(-1\)</span>, 后面的你就应该能够看得懂了.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">logicalNeg</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> lowbit = x &amp; (~x + <span class="number">1</span>); <span class="comment">// 0 if x = 0; 001000 if x = 001***</span></span><br><span class="line">    <span class="type">int</span> xp = ((lowbit + ~<span class="number">0</span>) &gt;&gt; <span class="number">31</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ~xp + <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol type="1"><li><span class="math inline">\(\text{lowbit}(x)\)</span> 的应用</li><li>一些统一不规则数的技巧 (感觉也可以算把相对连续的东西离散化)</li><li>看到右移一定要反应过来算术右移是高位补 <code>1</code> 的</li></ol><h2 id="xa-howmanybits">0xA howManyBits</h2><p>个人认为是最难的一个, 比后面浮点数什么的难多了</p><p>判断 <span class="math inline">\(x\)</span>在用补码表示的情况下最少需要几位</p><p>根据补码的规则不难看出答案是 <spanclass="math inline">\((\log_2(\text{highbit}(x)) + 1) + 1,\)</span>特别地, 对于 <span class="math inline">\(x = 0\)</span> 或 $ x = -1$,答案是 <span class="math inline">\(1\)</span>.</p><p>其中 <span class="math inline">\(\text{highbit}(x)\)</span> 是与<span class="math inline">\(\text{lowbit}(x)\)</span> 相对的最高位的<code>1</code> 所表示的数值, <spanclass="math inline">\(\log_2(\text{highbit}(x) + 1)\)</span> 则是这个为<code>1</code> 的位加上后面的 <code>0</code> 总共的位数(编号 <spanclass="math inline">\(+ 1\)</span>), 而再 <spanclass="math inline">\(+1\)</span> 是符号位.</p><ul><li>对于 <span class="math inline">\(x = 0\)</span> 不成立是因为 <spanclass="math inline">\(x = 0\)</span> 不需要符号位, 还记得吗, 补码的<span class="math inline">\(0\)</span> 是唯一的, 只有全 <code>0</code>为 <span class="math inline">\(0\)</span></li><li>对于 <span class="math inline">\(x = -1\)</span> 不成立是因为单一个<code>1</code> 会被认为是符号位, 计算为 <spanclass="math inline">\(-1\)</span>. 因此与之对应地, 比较难绷的是, <spanclass="math inline">\(1\)</span> 却需要至少两位补码才能表示 (符合公式,故不特殊列出)</li></ul><p>那么难点主要有两个:</p><ol type="1"><li>如何计算 <span class="math inline">\(\text{highbit}(x)\)</span>?(事实上, 我认为 <span class="math inline">\(\text{lowbit}(x)\)</span> 的<code>x &amp; -x</code> 也很传奇了)</li><li>如何计算 <span class="math inline">\(log_2(x)\)</span>?当然这里说的是只用位运算</li></ol><p><span class="math inline">\(\text{hightbit}(x)\)</span>也算一个不规则数统一的操作, 规整化后就可以通过 <spanclass="math inline">\(+1\)</span> 来消除连续的 <code>1</code> 了,那么就要考虑如何把最高位的 <code>1</code> 后面全填为 <code>1</code>,我一开始的做法里, 对 <spanclass="math inline">\(\text{highbit}(x)\)</span> 采用了一个小巧思,通过每次 <code>OR</code> 上一个 <span class="math inline">\(2\)</span>的幂次个 <code>1</code>, 把最高位 <code>1</code> 以后的位都填为<code>1</code>, 前面的位还是 <code>0</code> 不变, 现在就是<code>...0000111111..</code> 了, 再 <spanclass="math inline">\(+1\)</span> 并右移一位就是 <spanclass="math inline">\(\text{hightbit}(x)\)</span> 也就是 <spanclass="math inline">\(...000010000...\)</span> 了, 代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x |= x &gt;&gt; <span class="number">1</span>;</span><br><span class="line">x |= x &gt;&gt; <span class="number">2</span>;</span><br><span class="line">x |= x &gt;&gt; <span class="number">4</span>;</span><br><span class="line">x |= x &gt;&gt; <span class="number">8</span>;</span><br><span class="line">x |= x &gt;&gt; <span class="number">16</span>;</span><br><span class="line">x = (x + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>算 <span class="math inline">\(log_2(x)\)</span> 我则采用直接构建.注意到我们已有的是一个只有一位为 <code>1</code> 的二进制数,而我们要得到一这个 <code>1</code>所在位的编号——一个应该理解为十进制的数,通过位运算我们只能通过二进制来构造这个十进制数.</p><p>于是依次构建每一位, 先从最后一位开始考虑: 如果最后这一位是<code>1</code>, 那么编号一定是奇数, 于是突然想起之前那个<code>allOddBits</code> 的题, 用掩码做,此时我内心的感觉就像突然和出题人心意相通,于是很快通过找规律得到每一位对应的掩码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r |= !!(x &amp; <span class="number">0xAAAAAAAA</span>) &lt;&lt; <span class="number">0</span>; <span class="comment">// r odd; 1010</span></span><br><span class="line">r |= !!(x &amp; <span class="number">0xCCCCCCCC</span>) &lt;&lt; <span class="number">1</span>; <span class="comment">// r = 2/3, 6/7, 10/11; 1100</span></span><br><span class="line">r |= !!(x &amp; <span class="number">0xF0F0F0F0</span>) &lt;&lt; <span class="number">2</span>; <span class="comment">// r = 4/5/6/7; 1111_0000</span></span><br><span class="line">r |= !!(x &amp; <span class="number">0xFF00FF00</span>) &lt;&lt; <span class="number">3</span>; <span class="comment">// r = 8~15; 1111_1111_0000_0000</span></span><br><span class="line">r |= !!(x &amp; <span class="number">0xFFFF0000</span>) &lt;&lt; <span class="number">4</span>; <span class="comment">// pattern</span></span><br></pre></td></tr></table></figure><p><span class="math inline">\(r + 1\)</span> 则为最终的结果. 不过 当<span class="math inline">\(x = -1\)</span> 或 <spanclass="math inline">\(x = 0\)</span> 时是不能 <spanclass="math inline">\(+1\)</span> 的, 顺手的事:<code>return r + (!!(x ^ 0) &amp; !!(x ^ ~0));</code></p><p>结果 <code>./driver.pl</code> 后我以为整数部分就结束了, 结果发现没过,这时才想起来禁用大常量, <code>0xFFFF0000</code> 这些肯定是超过<code>0xFF</code> 了(写到这突然觉得这个掩码或许可以通过一个小一点的常量移位构造出来, 因为<code>AllOddBits</code> 实际上也是通过移位构造的掩码,但之前做的时候并没有想到)</p><p>于是我便只好考虑其他方案.</p><p><del>我甚至考虑了写 32 行语句挨个判断每一位, 从高到低找第一个<code>1</code></del>, 显然这样是不行的, 没那么多运算符给我用.</p><p>从高到低的思路应该是没问题的, 那么想要减少查找的数量,就想到了二分查找. 虽然不能使用循环, 但是对于 <spanclass="math inline">\(32\)</span> 位 (<spanclass="math inline">\(32\)</span> 个元素) 的二分查找其实只有 <spanclass="math inline">\(\log_2(32) = 5\)</span> 次 (左右),完全可以手写出来. <del>这何尝不是一种循环展开</del></p><p>确定好二分查找, 简单梳理一下查找逻辑:</p><ol type="1"><li>从高到低, 高 <span class="math inline">\(16\)</span> 位有<code>1</code> 吗?</li><li>如果有就继续检查这高 <span class="math inline">\(16\)</span> 位的高<span class="math inline">\(8\)</span> 位, 同时结果加上 <spanclass="math inline">\(16\)</span>, 因为编号必然大于 <spanclass="math inline">\(16\)</span> 了 (低 <spanclass="math inline">\(16\)</span> 位编号是 <spanclass="math inline">\(15 \sim 0\)</span>), 然后继续在这高 <spanclass="math inline">\(16\)</span> 位里面继续找(注意我们要找的是且仅是最高位 <code>1</code>)</li><li>否则就找这 <span class="math inline">\(16\)</span> 位之后的 <spanclass="math inline">\(8\)</span> 位有没有 <spanclass="math inline">\(1\)</span></li><li>就这样不停迭代下去</li></ol><p>判断是高 <span class="math inline">\(p\)</span> 位是否有<code>1</code>: <code>!!(y &gt;&gt; p)</code>, 这里使用到了之前的两次NOT 转换成纯粹 <span class="math inline">\(0/1\)</span> 的技巧</p><p>为了保持运算的统一性(减少运算符数量防止撞上限制), 使用<code>!!(y &gt;&gt; p) &gt;&gt; 4</code> 表示是否乘上 <spanclass="math inline">\(16\)</span> (如果高 <spanclass="math inline">\(16\)</span> 位没有 <code>1</code> 则乘上 <spanclass="math inline">\(0 \times 2^4 = 0\)</span>)</p><p>同时 “然后继续在这高 <span class="math inline">\(16\)</span>位里面继续找” 和”找这 <span class="math inline">\(16\)</span> 位之后的<span class="math inline">\(8\)</span> 位有没有 <spanclass="math inline">\(1\)</span>” 在我们的情况下也不便条件判断,也是采用移动的方式, 如果高 <span class="math inline">\(16\)</span> 位有<code>1</code> 就右移丢弃低 <span class="math inline">\(16\)</span> 位,没有的话就不右移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">r += !!(y &gt;&gt; <span class="number">16</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">y &gt;&gt;= r;</span><br><span class="line"></span><br><span class="line">shift8 = !!(y &gt;&gt; <span class="number">8</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">r += shift8;</span><br><span class="line">y &gt;&gt;= shift8;</span><br><span class="line"></span><br><span class="line">shift4 = !!(y &gt;&gt; <span class="number">4</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">r += shift4;</span><br><span class="line">y &gt;&gt;= shift4;</span><br><span class="line"></span><br><span class="line">shift2 = !!(y &gt;&gt; <span class="number">2</span>) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">r += shift2;</span><br><span class="line">y &gt;&gt;= shift2;</span><br><span class="line"></span><br><span class="line">r += (y &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>;<span class="comment">// 到这里时只剩下最后两位, 即 0/1/2/3</span></span><br></pre></td></tr></table></figure><p>这段代码实际上是计算 <spanclass="math inline">\((\log_2(\text{highbit}(x)) + 1)\)</span>,把两个活一起干了, 后面的逻辑是相同的.</p><p>帅吗? <del>还是没过.</del></p><p><span class="math inline">\(x\)</span> 可能是负数,对于负数要找绝对值所对应的正数, 对于正数则不变,写一个比较帅的无分支:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> sign = x &gt;&gt; <span class="number">31</span>;</span><br><span class="line"><span class="type">int</span> y = x ^ sign;</span><br></pre></td></tr></table></figure><p>反正不限制局部变量数量 <del>cache lab 就开始限制局部变量数量了,满足你</del></p><p>这里统一处理逻辑的话其实有点麻烦, 我直接近似 <code>~x</code>了(<code>x ^ sign</code>), <strong>这是错的</strong>,但是这个神人评测没查出来, 我就懒得改了 (写<code>(x ^ sign) + !!sign</code> 结果会错,因为补码的正负值域不对称性导致对 <spanclass="math inline">\(\text{Tmin}\)</span> 取绝对值会溢出, 见 <ahref="https://zheya.cc/2025/01/19/CSAPP-2025-01-19/">CSAPP3e第二章(整数的表示)| Amiriox’s Storage</a>, 是个比较典型的问题)</p><p>呃, 总体上就是实现了一个 C++20 的 <code>std::bit_width</code>.不得不感叹一下刚学的时候说起 C++20 都感觉很新潮很先进,<del>现在还是觉得很先进</del>, 现在 C++23 都是过去式了,我也再也没有青春的挡箭牌, 终归是走进了大学生活。</p><p><del>事到如今只好祭奠嗎</del></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">howManyBits</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="comment">// The prohibition of using large constants is</span></span><br><span class="line">    <span class="comment">// the most disgusting thing about this disgusting lab.</span></span><br><span class="line">    <span class="comment">// It forced me to abandon the more elegant masking method</span></span><br><span class="line">    <span class="comment">// and use binary division like enumeration.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* shit, i almost forgot macros are also banned.</span></span><br><span class="line"><span class="comment">#ifdef ENABLE_LARGE_CONSTANTS</span></span><br><span class="line"><span class="comment">    // int lowbit = x &amp; (~x + 1);</span></span><br><span class="line"><span class="comment">    // replace lowbit with highbit</span></span><br><span class="line"><span class="comment">    x |= x &gt;&gt; 1;</span></span><br><span class="line"><span class="comment">    x |= x &gt;&gt; 2;</span></span><br><span class="line"><span class="comment">    x |= x &gt;&gt; 4;</span></span><br><span class="line"><span class="comment">    x |= x &gt;&gt; 8;</span></span><br><span class="line"><span class="comment">    x |= x &gt;&gt; 16;</span></span><br><span class="line"><span class="comment">    x = (x + 1) &gt;&gt; 1;</span></span><br><span class="line"><span class="comment">    int r = 0;</span></span><br><span class="line"><span class="comment">    r |= !!(x &amp; 0xAAAAAAAA) &lt;&lt; 0; // r odd; 1010</span></span><br><span class="line"><span class="comment">    r |= !!(x &amp; 0xCCCCCCCC) &lt;&lt; 1; // r = 2/3, 6/7, 10/11; 1100</span></span><br><span class="line"><span class="comment">    r |= !!(x &amp; 0xF0F0F0F0) &lt;&lt; 2; // r = 4/5/6/7; 1111_0000</span></span><br><span class="line"><span class="comment">    r |= !!(x &amp; 0xFF00FF00) &lt;&lt; 3; // r = 8~15; 1111_1111_0000_0000</span></span><br><span class="line"><span class="comment">    r |= !!(x &amp; 0xFFFF0000) &lt;&lt; 4; // pattern</span></span><br><span class="line"><span class="comment">    return r + (!!(x ^ 0) &amp; !!(x ^ ~0));</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span> sign = x &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    <span class="type">int</span> y = x ^ sign;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> shift2 = <span class="number">0</span>, shift4 = <span class="number">0</span>, shift8 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    r += !!(y &gt;&gt; <span class="number">16</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">    y &gt;&gt;= r;</span><br><span class="line"></span><br><span class="line">    shift8 = !!(y &gt;&gt; <span class="number">8</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    r += shift8;</span><br><span class="line">    y &gt;&gt;= shift8;</span><br><span class="line"></span><br><span class="line">    shift4 = !!(y &gt;&gt; <span class="number">4</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    r += shift4;</span><br><span class="line">    y &gt;&gt;= shift4;</span><br><span class="line"></span><br><span class="line">    shift2 = !!(y &gt;&gt; <span class="number">2</span>) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    r += shift2;</span><br><span class="line">    y &gt;&gt;= shift2;</span><br><span class="line"></span><br><span class="line">    r += (y &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r + (!!(x ^ <span class="number">0</span>) &amp; !!(x ^ ~<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收获:</p><ol type="1"><li>倍增填 <code>1</code> 获取 <code>highbit</code></li><li>掩码计算 <code>highbit</code> 的编号</li><li>二分查找实现 <code>std::bit_width</code></li></ol><h2 id="xb-floatscale2">0xB floatScale2</h2><p><del>我突然想起来我完全忘记写 IEEE 754 浮点数相关的博客了, 而这恰好是CSAPP 第二章最有价值的一块</del></p><p>简单说下 IEEE 754,</p><p>对于阶码不全为 <code>0</code> 也不全为 <code>1</code> 的规格化数:</p><ul><li><span class="math inline">\(f = 1^\text{sign} \times \text{M} \times2^\text{E}\)</span></li><li><span class="math inline">\(\text{M}\)</span> 表示 <spanclass="math inline">\(\text{1.frac}\)</span>(对于大多数数可以额外多表示一位, 多一位的精度)</li><li><span class="math inline">\(\text{E}\)</span> 表示 <spanclass="math inline">\(e - \text{Bias}\)</span>, 其中 <spanclass="math inline">\(e\)</span> 为阶码 <spanclass="math inline">\(\text{exp}\)</span> 的原码, <spanclass="math inline">\(\text{Bias} = 2^{k-1} -1\)</span>, <spanclass="math inline">\(k\)</span> 为阶码 <spanclass="math inline">\(\text{exp}\)</span> 的位数(这里之所以采用偏移表示负数而不使用补码是因为易于比较,而浮点数的比较操作可能很多)</li></ul><p>对于阶码全为 <code>0</code> 的非规格化数:</p><ul><li><span class="math inline">\(f = 1^\text{sign} \times \text{M} \times2^\text{E}\)</span></li><li><span class="math inline">\(M\)</span> 表示 <spanclass="math inline">\(\text{0.frac}\)</span></li><li><span class="math inline">\(\text{E}\)</span> 表示 <spanclass="math inline">\(1 - Bias\)</span>, 其中 <spanclass="math inline">\(e\)</span> 为阶码 <spanclass="math inline">\(\text{exp}\)</span> 的原码, <spanclass="math inline">\(\text{Bias} = 2^{k-1} -1\)</span>, <spanclass="math inline">\(k\)</span> 为阶码 <spanclass="math inline">\(\text{exp}\)</span> 的位数 (这里之所以采用 <spanclass="math inline">\(1 - \text{Bias}\)</span> 而不是 <spanclass="math inline">\(0 - \text{Bias}\)</span>,是因为最小的规格化数的阶码就是当 <span class="math inline">\(e =1\)</span> 时的 <span class="math inline">\(1 - \text{Bias}\)</span>,以此保证了规格化数与非规格化数之间的连续性)</li></ul><p>对于阶码全为 <code>1</code> 的特殊值:</p><ul><li>如果 <span class="math inline">\(\text{frac}\)</span> 全为<code>0</code>, 则为无穷大 (说明是计算溢出来的)</li><li>如果 <span class="math inline">\(\text{frac}\)</span> 不全为<code>0</code>, 则为 <span class="math inline">\(\text{NaN}\)</span>(不瞒你说, 我现去搜了一下 Not a number 用 <spanclass="math inline">\(\LaTeX\)</span> 怎么打, 但是没有)</li></ul><p>舍入什么的有时间再补吧, 先看题</p><p>则对于本题, <del>本题是什么来着</del>, <spanclass="math inline">\(\text{uf} \times 2\)</span> 还是比较好写的,先提取三个段然后处理:</p><ol type="1"><li>如果是 <span class="math inline">\(-0\)</span> (很遗憾, IEEE 754 的<span class="math inline">\(0\)</span> 有两个表示, 因为除 <spanclass="math inline">\(0\)</span> 可得正负无穷), 直接返回</li><li>如果是无穷大或者 <span class="math inline">\(\text{NaN}\)</span>,直接返回</li><li>如果是阶码全 <code>0</code>, 且较小(不涉及乘 <spanclass="math inline">\(2\)</span> 后变成规格化数)的非规格化数, 直接对<span class="math inline">\(\text{frac}\)</span> 乘 <spanclass="math inline">\(2\)</span>. 注意此时就不能对阶码 <spanclass="math inline">\(+1\)</span></li><li>如果是阶码全 <code>0</code>, 较大的非规格化数, 除了 <spanclass="math inline">\(\text{frac} \times 2\)</span>, 阶码还是要 <spanclass="math inline">\(+1\)</span></li><li>如果是规格化数, 阶码 <span class="math inline">\(+ 1\)</span>即可</li><li>最后再拼好数</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="title function_">floatScale2</span><span class="params">(<span class="type">unsigned</span> uf)</span> &#123;</span><br><span class="line">    <span class="comment">//   1 | 8 | 23</span></span><br><span class="line">    <span class="comment">// sign exp frac</span></span><br><span class="line">    <span class="type">unsigned</span> sign = (uf &gt;&gt; <span class="number">31</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="built_in">exp</span> = (uf &lt;&lt; <span class="number">1</span>) &gt;&gt; (<span class="number">24</span>);</span><br><span class="line">    <span class="type">unsigned</span> frac = (uf &lt;&lt; <span class="number">9</span>) &gt;&gt; <span class="number">9</span>;</span><br><span class="line">    <span class="type">unsigned</span> dt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(uf &lt;&lt; <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> uf;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">0xFF</span>) <span class="comment">/*if(!frac)*/</span></span><br><span class="line">        <span class="keyword">return</span> uf;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">exp</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(frac &gt;&gt; <span class="number">22</span>)) &#123;</span><br><span class="line">            dt--;</span><br><span class="line">        &#125;</span><br><span class="line">        frac &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (sign &lt;&lt; <span class="number">31</span>) | ((<span class="built_in">exp</span> + dt) &lt;&lt; <span class="number">23</span>) | frac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="xc-floatfloat2int">0xC floatFloat2Int</h2><p><code>float</code> 转换为 <code>int</code>. 回顾转换规则,<code>float</code> 转换到 <code>int</code> 不仅会向零舍入, 还可能会溢出,所以要考虑溢出的情况</p><p>仍然是三段提取, 开始计算:</p><ol type="1"><li>计算一下应该乘的权重 <span class="math inline">\(e -\text{Bias}\)</span> (如果 <span class="math inline">\(e \lt\text{Bias}\)</span>, 说明是小于 <span class="math inline">\(1\)</span>的浮点数, 直接返回 <span class="math inline">\(0\)</span>)</li><li>补上规格化数 <span class="math inline">\(\text{frac}\)</span>缺省的小数点前的 <span class="math inline">\(1\)</span>,此时小数点相当于位于最高位 <code>1</code> 前,需要准备恢复出本身带有的权重(右移 <spanclass="math inline">\(23\)</span> 位), 以及乘权重 <spanclass="math inline">\(E\)</span>. (<spanclass="math inline">\(\text{frac}\)</span> 表示小数点后 <spanclass="math inline">\(2\)</span> 的负整数次幂的数值, 直接乘 <spanclass="math inline">\(2\)</span> 的正整数次幂提升权重是兼容的)</li><li>按照 <span class="math inline">\(\text{Tmax}\)</span>的值注意一下可能会溢出的情况. 实际上这行<code>((E &gt;= 31 &amp;&amp; (!sign || (sign &amp;&amp; frac))) || exp == 0xFF)</code>是主要的难点</li><li>如果先右移移动 <span class="math inline">\(23\)</span>位可能会丢精度, 所以这里考虑和 <span class="math inline">\(E\)</span>计算差值转移.</li><li>最后根据符号位转一下符号. 由于允许了 <code>if else</code>,我懒得写无分支了</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">floatFloat2Int</span><span class="params">(<span class="type">unsigned</span> uf)</span> &#123;</span><br><span class="line">    <span class="comment">//   1 | 8 | 23</span></span><br><span class="line">    <span class="comment">// sign exp frac</span></span><br><span class="line">    <span class="type">unsigned</span> sign = (uf &gt;&gt; <span class="number">31</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="built_in">exp</span> = (uf &lt;&lt; <span class="number">1</span>) &gt;&gt; (<span class="number">24</span>);</span><br><span class="line">    <span class="type">unsigned</span> frac = (uf &lt;&lt; <span class="number">9</span>) &gt;&gt; <span class="number">9</span>;</span><br><span class="line">    <span class="type">unsigned</span> E = <span class="number">0</span>, A = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(uf &lt;&lt; <span class="number">1</span>) || <span class="comment">/*!exp*/</span> <span class="built_in">exp</span> &lt; <span class="number">0x7f</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    E = <span class="built_in">exp</span> - <span class="number">0x7f</span>;</span><br><span class="line">    A = (<span class="number">1U</span> &lt;&lt; <span class="number">23</span>) | frac;</span><br><span class="line">    <span class="comment">// check overflow</span></span><br><span class="line">    <span class="comment">// INT_MAX = T32Max = 0b_0111_1111_1111_1111_1111_1111_1111_1111</span></span><br><span class="line">    <span class="keyword">if</span> ((E &gt;= <span class="number">31</span> &amp;&amp; (!sign || (sign &amp;&amp; frac))) || <span class="built_in">exp</span> == <span class="number">0xFF</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x80000000</span>u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (E &gt;= <span class="number">23</span>) &#123;</span><br><span class="line">        A &lt;&lt;= (E - <span class="number">23</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        A &gt;&gt;= (<span class="number">23</span> - E);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sign) &#123;</span><br><span class="line">        <span class="keyword">return</span> ~A + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="xd-floatpower2">0xD floatPower2</h2><p>构造 <span class="math inline">\(2.0 ^ {x}\)</span> 的 <spanclass="math inline">\(32\)</span> 位 IEEE 754 浮点数</p><p>主要考察对非规格数, 规格数的值域以及其连续性</p><p><span class="math inline">\(\text{exp}\)</span> 是 8 位无符号整型,分类讨论一下</p><ul><li><code>0b11111111</code> $ = 2^8 - 1$, 说明浮点数是 <spanclass="math inline">\(\infty /\text{NaN}\)</span></li><li><code>0b11111110</code> <span class="math inline">\(= 2^8-2 =254\)</span></li><li><span class="math inline">\(\text{U8Min} = 0\)</span>, 是非规格化数;对于规格数, 最小的阶码就是1</li><li>规格化数可表示的 <span class="math inline">\(2^x\)</span>, <spanclass="math inline">\(x = {e - 127}\)</span>, 取值范围: <spanclass="math inline">\([-126, 127]\)</span> 连续 (保持 M 为 0.0, 即1.0)</li><li>非规格化数: <span class="math inline">\(x &lt; 0\)</span>,算入阶码权重计算出来是这样的: <spanclass="math inline">\(2^{-1-126}+2^{-2-126}+2^{-3-126}+...+2^{-23-126}\)</span>,取值范围 <span class="math inline">\([-149, -127]\)</span></li></ul><p>得出值域后分别构造 IEEE 754 标准浮点数处理就行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="title function_">floatPower2</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="built_in">exp</span> = <span class="number">0</span>, s = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">127</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x7f800000</span>; <span class="comment">//(0xFF &lt;&lt; 23);</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= <span class="number">-126</span> &amp;&amp; x &lt;= <span class="number">127</span>) &#123;</span><br><span class="line">        <span class="built_in">exp</span> = (<span class="number">127</span> + x);</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exp</span> &lt;&lt; <span class="number">23</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= <span class="number">-149</span> &amp;&amp; x &lt; <span class="number">-126</span>) &#123;</span><br><span class="line">        s = <span class="number">149</span> + x;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1U</span> &lt;&lt; s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="summary">Summary</h2><p>我个人对这个 Lab 的评价不是很高, 感觉不是很有意思</p><p>但是确实对于数的表示上有很大的作用, 就是枯燥了些</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;禁用大量常见运算符,
强制规定特定位运算运算符和运算符数量限制实现特定运算&lt;/p&gt;
&lt;p&gt;所谓 Hacker’s Delight&lt;/p&gt;
&lt;p&gt;在写 CSAPP Lab 之前一定要仔细阅读文档, 一行要求都不能落下, 比如这个
lab 就有一些无聊的要求:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;要求变量声明必须在开头(这 C89 古董规则太搞了)&lt;/li&gt;
&lt;li&gt;不允许使用大字面量(超过 &lt;code&gt;0xFF&lt;/code&gt; 的)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了您的阅读方便, 本文对于特定位/位模式采用行内引用 (&lt;code&gt;0&lt;/code&gt;
或 &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;1000&lt;/code&gt;, &lt;code&gt;1101&lt;/code&gt;),
对于数字的十进制值, 位的编号等采用 &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;LaTeX&#92;)&lt;/span&gt; 的数字字体 (&lt;span
class=&quot;math inline&quot;&gt;&#92;(3, 4, 5, 6&#92;)&lt;/span&gt;)&lt;/p&gt;</summary>
    
    
    
    <category term="组成原理" scheme="https://amiriox.github.io/categories/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="计算机科学" scheme="https://amiriox.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="CSAPP/cmu15213" scheme="https://amiriox.github.io/tags/CSAPP-cmu15213/"/>
    
  </entry>
  
  <entry>
    <title>Geleitet durch Not und Nacht</title>
    <link href="https://amiriox.github.io/2025/08/14/Dairy_250814/"/>
    <id>https://amiriox.github.io/2025/08/14/Dairy_250814/</id>
    <published>2025-08-14T14:54:33.000Z</published>
    <updated>2025-08-14T15:57:42.059Z</updated>
    
    <content type="html"><![CDATA[<p>我其实一直都单曲循环手动切歌的, 今天不小心点到随机了,然后随机到了<em>歌唱动荡的青春</em>。</p><p>青年时代(如果说即将大二的我已经不能再称为青年,或者我已经缺乏了某些青年应当具备的东西)的我对这首歌有着很深刻的印象,能够和这样一首音乐同频共振也是一件很幸运的事。</p><p>突然发现我距离需要全心全意备考研究生初试的时间只有约 <spanclass="math inline">\(564\)</span> 天了, 到考的那一天也就只有 <spanclass="math inline">\(839\)</span> 天了,相当于我人生中还属于我的时间只剩下五百多天:未来的我将会告别现在这样的自己,就像现在的自己已经完全不能想象很多个之前的自己真的是自己。我有变得更好吗?至少技术上是的, 也许吧。这就够了。</p><p><strong>这够吗?</strong></p><hr /><p>长期的挫败让你抬不起头来了,而这样的失败又导致你不得不追求更有意义的人生. 最后, 我被分为了无数个deadline.</p><p>没准时间是离散的呢, 那样的话我们每个人其实只能活大约 <spanclass="math inline">\(10^{-44}\)</span> 秒,我们每一秒都有一载(这是个很生僻的计数单位)个自己出生和死亡,我们的意识只是虚构的假象罢了, 就像 CPU 虚拟化那样。</p><p>记得初中的我每天早起一小时读 <em>C++ Primer Plus</em>,坚持了两个月读完了 800 页的书. 我现在想对当时的自己说: “你应该读不带Plus 的版本, 那本更好一些。”</p><p>当然, 我有点不认识当时的我了,喜欢在绝对黑暗的房间里用一盏台灯的光圈养起自己灵魂的自己。不过我还是可以用知识串联起来:当时的我对 RAII 一知半解, 现在我还能感叹 RAII/RRID在内存管理甚至并发的锁上的方便之处了。</p><p>但我的高三可能是真的丢了, 我除了在听 <em>BE ME</em> 或者<em>二十二</em> 的时候还能想起我应该有过这么一段时间,剩下我都没什么印象了。对了, 我还在医院里和你玩扑克牌来着,那个游戏叫做”恨与怨”(<em>Spite and malice</em>), 是 <spanclass="math inline">\(20\)</span> 世纪 <spanclass="math inline">\(60\)</span> 年代 (你可以看到我在滥用 <spanclass="math inline">\(\LaTeX\)</span> 了, 或者说, <spanclass="math inline">\(L^AT_EX\)</span>)一种夫妻和伴侣间的”俄罗斯银行”的简化。我们讨论了许多问题,也许比这个游戏有趣, 但我已经不记得了。</p><p>我一瘸一拐地走下台阶,不是因为我想弄什么青春伤痛文学或者英雄末路的戏码,单纯是因为我脚崴了。</p><p>因为从未受过这样的严重的伤害——不是说我没崴过, 我之前也崴过一次,只是这也是分轻重的——我以为崴了要一直养伤就没走路, 结果筋短了, 要硬 flat回来, 所以要复健了。</p><p>逃避痛苦反而带来了更大的痛苦;但苦难崇拜比那个更大的痛苦还大。所以你要在这之间寻找微妙的平衡.</p><p>悲观有这样的一种确认的安全感：既然我已经把所有事情往最坏的情况想了，那么还剩下的我认为不会失去的就大概率不会失去了,但是你最好想想如果”认为不会失去”的清单空了怎么办。</p><p>我还是很喜欢你, 但是在这样的上下文环境里,我的喜欢像一种执着挑衅的幻觉, 起码在你那看来是这样的。</p><p>下次你再见到我时, 我应该正在梵高的葬礼上哭。</p><p><strong>梵高没有举办过葬礼。</strong></p><hr /><p>“不要太在乎结果”是有些道理的, 感觉之前我确实是急了然后开始各种诡辩了,中午吃蘑菇没洗导致的。</p><blockquote><p>你也许注意到了我 <code>。</code> 和 <code>.</code> 的混用,这是我故意的, 而且我现在也在乱用引用块。</p><p>究其根本, 是因为我开启了输入法在中文状态下输出英文符号的功能,所以我的<code>。</code>是通过拼音<code>ju'hao</code>并选中候选词打出来的。&lt;- 没错就是这样</p></blockquote><p>在意结果就意味着想要走捷径, 而想要走捷径的人慢慢就会失去动力的。&lt;- 没错就是这样</p><p>确定好自己的内驱力, 你不能把自己变成有限状态机, 啊, 升华, 升华</p><p>你的观点错得离谱，但是要和你解释清楚需要至少一个小时和十页的参考文献，并且网络支教又不给钱，此时一种无力感油然而生。</p><p>但是有些事情的动机也确实很迷惑, 总之你应该减少任务的类别, 要在乎过程,享受「内容」。(这里的直角引号是我通过微软输入法的 U 模式<code>uubd</code> 打出来的. 如果我在 Linux fcitx5 上就会舒服很多,因为我直接把引号映射到直角引号了。当然这个句号还是我用拼音打出来的)</p><p>最后, 要给自己一些喘息的时间, 这样你才有能力面对那些真正凶恶的敌人(至少目前来讲是敌人)句号</p><p>但是, 我应该怎么学会喘息呢? 首先要从窒息的状态中出来,然后防止自己因为习惯开始憋气。最好能长出一对鳃</p><p>你的生活里还有什么能温暖你的存在吗?我是说不用什么精力也不用强迫自己去做的, 也不会让自己因为学不好就急了的,唉, 你有完没完, <code>filter</code> 是这么写的吗</p><p>我挺想学板绘的, 但我的手比时钟周期高低电平还抖, 我练了几个月线条了,还是画得跟手崴了一样 (我没崴过手)</p><p>那么, 明日方舟呢? 孤独摇滚呢? 《精神分析诊断》呢? 《计算理论导引》呢?未经考察的人生不值得一过。</p><p>欸, 我高三的时候真拿龙书当消遣来看的, 所以你看到我高考分很低,现在考到这来了, 估计有很多人在笑我吧,<strong>因为我走路一瘸一拐的。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我其实一直都单曲循环手动切歌的, 今天不小心点到随机了,
然后随机到了&lt;em&gt;歌唱动荡的青春&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;青年时代(如果说即将大二的我已经不能再称为青年,
或者我已经缺乏了某些青年应当具备的东西)的我对这首歌有着很深刻的印象,
能够和这样一首音乐同频共振也是一件很幸运的事。&lt;/p&gt;
&lt;p&gt;突然发现我距离需要全心全意备考研究生初试的时间只有约 &lt;span class=&quot;math inline&quot;&gt;&#92;(564&#92;)&lt;/span&gt; 天了, 到考的那一天也就只有 &lt;span class=&quot;math inline&quot;&gt;&#92;(839&#92;)&lt;/span&gt; 天了,
相当于我人生中还属于我的时间只剩下五百多天:
未来的我将会告别现在这样的自己,
就像现在的自己已经完全不能想象很多个之前的自己真的是自己。我有变得更好吗?
至少技术上是的, 也许吧。这就够了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这够吗?&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="杂谈" scheme="https://amiriox.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="日记" scheme="https://amiriox.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
</feed>
